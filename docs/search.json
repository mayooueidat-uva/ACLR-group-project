[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DS2023 Final Project (Rename)",
    "section": "",
    "text": "Report",
    "crumbs": [
      "Report"
    ]
  },
  {
    "objectID": "EDA/datacleaning_forbook.html",
    "href": "EDA/datacleaning_forbook.html",
    "title": "Data Cleaning",
    "section": "",
    "text": "The purpose of this section is to prepare the data for analysis and graph making. This includes choosing relevant variables, cleaning the dataset, and handling missing values.\nNote: The data used in this project is simulated and does not contain real patient information.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "EDA/datacleaning_forbook.html#loading-raw-data",
    "href": "EDA/datacleaning_forbook.html#loading-raw-data",
    "title": "Data Cleaning",
    "section": "Loading Raw Data",
    "text": "Loading Raw Data\n\n# import libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n\n# Load in data\ndata = pd.read_csv('../data/aclr_data.csv')\ndata.head()\n\n\n\n\n\n\n\n\nrecord_id\nredcap_event_name\nredcap_repeat_instrument\nsex_dashboard\ngraft_dashboard2\nmed_meniscus\nlat_meniscus\nlat_stab\nphysis\nvisit_sex\n...\nlsi_flex_mvic_60\nacl_ext_isok_60\ncon_ext_isok_60\nlsi_ext_isok_60\nacl_flex_isok_60\ncon_flex_isok_60\nlsi_flex_isok_60\nstrength_testing_complete\nrts\nrts_tss\n\n\n\n\n0\n1\nbaseline_arm_1\nNaN\nMale\nOther\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n1\nvisit_1_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nMale\n...\nNaN\n2.57\n2.92\n87.86\n1.50\n1.45\n103.32\n2.0\nNaN\nNaN\n\n\n2\n1\nlong_term_outcomes_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n3.0\n70.0\n\n\n3\n2\nbaseline_arm_1\nNaN\nFemale\nHS autograft\n1.0\n3.0\n1.0\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\n2\nvisit_1_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nFemale\n...\nNaN\n0.97\n2.16\n45.00\n0.88\n1.20\n72.98\n2.0\nNaN\nNaN\n\n\n\n\n5 rows × 63 columns\n\n\n\nAfter loading in the data and taking a first glance, we notice that there are many variables and missing values. This is why we will select for variables related to our interest, and in the later steps handle missing values.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "EDA/datacleaning_forbook.html#variable-selection",
    "href": "EDA/datacleaning_forbook.html#variable-selection",
    "title": "Data Cleaning",
    "section": "Variable Selection",
    "text": "Variable Selection\nFor our final analysis, we focus on the following main variables:\n\nacl_rsi: Anterior cruciate ligament return-to-sport after injury survey\nlsi_ext_isok_60: Limb symmetry index for isokinetic extension strength at a sixty-degree angle\nlsi_flex_isok_60: Limb symmetry index for isokinetic flexion strength at a sixty-degree angle\nsh_lsi: Single hop limb symmetry index\n\nThere are additional patient related variables included as well. These are record id, event name, sex, and age.\nVariables unrelated to the outcome of interest were excluded to simplify the dataset.\n\n# Let's keep only the columns we are interested in\ndata = data[['record_id', 'redcap_event_name', 'sex_dashboard', 'age', 'age_group', 'acl_rsi', 'lsi_ext_isok_60', 'lsi_flex_isok_60', 'sh_lsi']]",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "EDA/datacleaning_forbook.html#handling-missing-data",
    "href": "EDA/datacleaning_forbook.html#handling-missing-data",
    "title": "Data Cleaning",
    "section": "Handling Missing Data",
    "text": "Handling Missing Data\nFirst let’s look at a heatmap to visually understand where the missing data lies. The yellow values show missing information.\n\nsns.heatmap(data.isnull(), cmap='viridis', yticklabels=False)\n\n\n\n\n\n\n\n\nRecord id and event description have no missing values. It seems that many of the numerical measurements are missing. Due to site-specific data collection differences, there are more missing values for tests relating to 60 degrees/sec. In relation to our dataset, this includes two variables: LSI for isokinetic extension and LSI for isokinetic flexion strength. We decided to drop rows with missing values in these columns.\nBut first, we must fill in the sex column. This is because, our dataset is longitudinal and patients come in at irregular time intervals. There are multiple entries per patient, but some variables like sex are not recorded each visit. Thus, we can fill in data that is already known based on the subject’s first entry.\n\n# We can fill in known cells, such as the sex based on the first occurrence \ndata['sex_dashboard'] = data.groupby('record_id')['sex_dashboard'].transform('first')\n#data['sex_dashboard'] = data['sex_dashboard'].fillna('Unknown')\n\nThen, let’s drop the NAs.\n\ndata = data.dropna(subset=['lsi_ext_isok_60', 'lsi_flex_isok_60'])\n\nNext, we noticed that within the event column, the first event called baseline_arm_1 only includes a patient’s sex and has missing values for everything else. So, we will remove all rows where this is the event.\n\ndata = data[data['redcap_event_name'] != 'baseline_arm_1']\n\nLet’s look at the heatmap again and see how our missing values look!\n\nsns.heatmap(data.isnull(), cmap='viridis', yticklabels=False)\n# It looks much better\n\n\n\n\n\n\n\n\nIt looks like most of our values are filled, asides from two variables. Let’s look at the counts for each variable to decide whether or not to drop the missing values for acl_rsi and sh_lsi as well.\n\npd.DataFrame({'Count': data.count()})\n\n\n\n\n\n\n\n\nCount\n\n\n\n\nrecord_id\n2222\n\n\nredcap_event_name\n2222\n\n\nsex_dashboard\n2220\n\n\nage\n2221\n\n\nage_group\n2221\n\n\nacl_rsi\n1624\n\n\nlsi_ext_isok_60\n2222\n\n\nlsi_flex_isok_60\n2222\n\n\nsh_lsi\n1381\n\n\n\n\n\n\n\n\n# Total rows in original dataset\nprint(f\"Total rows before drop: {len(data)}\")\n\n# Rows remaining if we drop NA from acl_rsi and sh_lsi\nprint(f\"Rows after dropping acl_rsi and sh_lsi NAs: {len(data.dropna(subset=['acl_rsi', 'sh_lsi']))}\")\n\n# Rows lost\nprint(f\"Rows lost: {len(data) - len(data.dropna(subset=['acl_rsi', 'sh_lsi']))}\")\n\nTotal rows before drop: 2222\nRows after dropping acl_rsi and sh_lsi NAs: 1229\nRows lost: 993\n\n\nThe filled variables have a count of mostly 2222. Two variables, however, have notably fewer values (1624 and 1381 respectfully). Dropping these variables would significantly reduce the number of patients available for analysis, by around half. Also, due to differences in data collection and patients not doing every test each visit, the remaining missing values is due to a structural reason. For these reasons, we have decided to retain the remaining two variables as is.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "EDA/datacleaning_forbook.html#last-checkups",
    "href": "EDA/datacleaning_forbook.html#last-checkups",
    "title": "Data Cleaning",
    "section": "Last Checkups",
    "text": "Last Checkups\nLet’s make sure all the columns are the correct data type.\n\npd.DataFrame({'Dtype': data.dtypes})\n# It seems that all categorical variables and numeric variables are the correct type\n\n\n\n\n\n\n\n\nDtype\n\n\n\n\nrecord_id\nint64\n\n\nredcap_event_name\nobject\n\n\nsex_dashboard\nobject\n\n\nage\nfloat64\n\n\nage_group\nfloat64\n\n\nacl_rsi\nfloat64\n\n\nlsi_ext_isok_60\nfloat64\n\n\nlsi_flex_isok_60\nfloat64\n\n\nsh_lsi\nfloat64\n\n\nvisit_num\nint64\n\n\n\n\n\n\n\nLet’s make sure nothing is duplicated.\n\ndata.duplicated().value_counts()\n# All false!\n\nFalse    2222\nName: count, dtype: int64",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "EDA/datacleaning_forbook.html#adding-new-variables",
    "href": "EDA/datacleaning_forbook.html#adding-new-variables",
    "title": "Data Cleaning",
    "section": "Adding New Variables",
    "text": "Adding New Variables\nHere, we will create a new dataset that contains the 25th and 75th percentile for each visit. We will use this dataset for some visualizations later on. Additionally, we will add a new column, visit number, to more easily map out “change over time” for later visualizations.\n\n# Find the 25th and 75th percentile for each visit (1,2,3,4,...)\nflsi_percentiles = data.groupby('redcap_event_name')['lsi_flex_isok_60'].agg(mean='mean',q25='quantile', q75='quantile').reset_index()\nflsi_percentiles['q25'] = data.groupby('redcap_event_name')['lsi_flex_isok_60'].quantile(0.40).values\nflsi_percentiles['q75'] = data.groupby('redcap_event_name')['lsi_flex_isok_60'].quantile(0.60).values\n\nvisit_map = {\n    'visit_1_arm_1': 1,\n    'visit_2_arm_1': 2,\n    'visit_3_arm_1': 3,\n    'visit_4_arm_1': 4,\n    'visit_5_arm_1': 5,\n    'visit_6_arm_1': 6,\n    'visit_7_arm_1': 7,\n    'visit_8_arm_1': 8,\n    'visit_9_arm_1': 9}\n\n# Create a new column with just the visit number\nflsi_percentiles['visit_num'] = flsi_percentiles['redcap_event_name'].map(visit_map)\nflsi_percentiles['visit_num'] = pd.to_numeric(flsi_percentiles['visit_num'], errors='coerce').astype('Int64')\nflsi_percentiles = flsi_percentiles[flsi_percentiles['redcap_event_name'] != 'data_upload_arm_2'] # remove unneeded values\n\n# In original dataset, create new column with just the visit number as well\ndata['visit_num'] = data['redcap_event_name'].map(visit_map)\nflsi_percentiles['visit_num'] = pd.to_numeric(flsi_percentiles['visit_num'], errors='coerce').astype('Int64')",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "EDA/datacleaning_forbook.html#export-the-datasets",
    "href": "EDA/datacleaning_forbook.html#export-the-datasets",
    "title": "Data Cleaning",
    "section": "Export the datasets",
    "text": "Export the datasets\n\n## Export the datasets\n\ndata.to_csv('../data/final_data_cleaned.csv', index=False)\nflsi_percentiles.to_csv('../data/percentiles.csv', index=False)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "Graphs/Visualizations_book.html",
    "href": "Graphs/Visualizations_book.html",
    "title": "Visualizations",
    "section": "",
    "text": "Graph 1: Flexion LSI over time\nWhen it comes to a patient understanding their ACLR recovery, being able to visually see changes across time makes understanding their recovery progress easier. Through a line plot, a patient can visually see that progression over multiple visits, allowing them to notice any irregularities that go against the general pattern, which is usually an increase in the recovery statistic. Additionally, having a background population of patients who also underwent ACLR surgery acts as a comparison point, allowing them to compare themselves to a group of people who have gone through a similar recovery process. Having the patient be able to picture themselves in the data is important, as we want for them to understand where they stand in recovery without explicitly knowing miniscule details about medical terminology. Sometimes, seeing yourself as a positive sloping line among a positive sloping population is enough to understand that recovery is going smoothly.\nThis is a line graph that captures a single patient’s recovery progress for Flexion LSI (using a randomly chosen patient with at least 4 visits). Additionally, it has Flexion LSI data over visits from all the patients in the study, which acts as a comparison point for the patient. The population data is shaded to show the IQR, which is the 25th to 75th percentile. My goal is for the patient to be able to picture himself/herself in recovery and understand that test results usually get better over time.\n# Plot IQR 25 to 75, and fill the space between\nplt.plot(flsi_percentiles['visit_num'], flsi_percentiles['q25'], color=\"#E5E5E5\", alpha=0.5)\nplt.plot(flsi_percentiles['visit_num'], flsi_percentiles['q75'], color=\"#E5E5E5\", alpha=0.5)\nplt.fill_between(flsi_percentiles['visit_num'], \n                 flsi_percentiles['q25'], \n                 flsi_percentiles['q75'], color=\"#E5E5E5\", alpha=0.5, label = 'patients')\n\n# Choose a patient to showcase their recovery progress\nhighlight_data = data[data['record_id'] == 109]\n\n# Line plot of recovery\nplt.plot(highlight_data['visit_num'], highlight_data['lsi_flex_isok_60'],\n         linestyle='-', marker='o', color='#00A9FF', label='You')\n\n# Add colored dots\nplt.plot(highlight_data['visit_num'].iloc[0], highlight_data['lsi_flex_isok_60'].iloc[0], marker='o', color='#E5383B', markersize=6)\nplt.plot(highlight_data['visit_num'].iloc[3], highlight_data['lsi_flex_isok_60'].iloc[3], marker='o', color='#2DC653', markersize=6)\n\n# Add titles/labels/text\nplt.title('Tracking Your Flexion LSI Recovery Over Visits', weight='bold', size=17, x=0.522, y=1.1, fontfamily='Sinhala Sangam MN')\nplt.figtext(0.91, 0.76, 'Your Progress', size = 12, color='#00A9FF', fontfamily='Sinhala Sangam MN')\nplt.figtext(0.91, 0.68, \"Other Patients' IQR\", size = 12, color='gray', fontfamily='Sinhala Sangam MN')\nplt.figtext(0.91, 0.63, \"(Middle 50%)\", size = 12, color='gray', fontfamily='Sinhala Sangam MN')\nplt.figtext(0.182, 0.0755, \"st Visit ...\", size = 11, color='black', fontfamily='Sinhala Sangam MN')\nplt.figtext(0.165, 0.019, \"Note: Data from Patient ID 109\", size = 11, color='gray', fontfamily='Sinhala Sangam MN')\n\n# Customize graph\nplt.xlim(.8, 4.07)\nplt.xticks([1, 2, 3, 4])\nplt.ylim(76, 100)\nplt.yticks([80, 90, 100])\n\nplt.tick_params(axis='y', which='both',length=0)\nplt.tick_params(axis='x', which='both',length=0)\n\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.gca().spines['bottom'].set_visible(False)\n\nplt.grid(axis='y', linestyle = '--')\n\n# Save final image\nplt.savefig(\"./graph_images/lsi_flexion_line.png\", bbox_inches='tight')",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Visualizations</span>"
    ]
  },
  {
    "objectID": "Graphs/Visualizations_book.html#graph-1-continued-line-plot-series",
    "href": "Graphs/Visualizations_book.html#graph-1-continued-line-plot-series",
    "title": "Visualizations",
    "section": "Graph 1 Continued: Line Plot Series",
    "text": "Graph 1 Continued: Line Plot Series\nAs a continuation from the first graph, this visualization shows subplots of three LSI (limb symmetry index) scores across visits. Patients may find it helpful to see how their different functional assessments differ. The goal of this graph is for the patient to easily see their improvements or deficiencies.\n\n# Create data for subplots\n\n# Extension LSI\n# Find the 25th and 75th percentile for each visit (1,2,3,4,...)\nelsi_percentiles = data.groupby('redcap_event_name')['lsi_ext_isok_60'].agg(mean='mean',q25='quantile', q75='quantile').reset_index()\nelsi_percentiles['q25'] = data.groupby('redcap_event_name')['lsi_ext_isok_60'].quantile(0.40).values\nelsi_percentiles['q75'] = data.groupby('redcap_event_name')['lsi_ext_isok_60'].quantile(0.60).values\n\nvisit_map = {\n    'visit_1_arm_1': 1,\n    'visit_2_arm_1': 2,\n    'visit_3_arm_1': 3,\n    'visit_4_arm_1': 4,\n    'visit_5_arm_1': 5,\n    'visit_6_arm_1': 6,\n    'visit_7_arm_1': 7,\n    'visit_8_arm_1': 8,\n    'visit_9_arm_1': 9}\n\n# Create a new column with just the visit number\nelsi_percentiles['visit_num'] = elsi_percentiles['redcap_event_name'].map(visit_map)\nelsi_percentiles['visit_num'] = pd.to_numeric(elsi_percentiles['visit_num'], errors='coerce').astype('Int64')\nelsi_percentiles = elsi_percentiles[elsi_percentiles['redcap_event_name'] != 'data_upload_arm_2'] # remove unneeded values\n\n# SH LSI\n# Find the 25th and 75th percentiles\nsh_lsi_percentiles = data.groupby('redcap_event_name')['sh_lsi'].agg(q25=lambda x: x.quantile(0.4), q75=lambda x: x.quantile(0.6)).reset_index()\nsh_lsi_percentiles['visit_num'] = sh_lsi_percentiles['redcap_event_name'].map(visit_map)\nsh_lsi_percentiles = sh_lsi_percentiles[sh_lsi_percentiles['redcap_event_name'] != 'data_upload_arm_2']\n\n\nfig, axs = plt.subplots(3,1, figsize=(6, 18)) # set the figure size and have 3 small multiples within the figure\n\naxs = axs.flatten()\nhighlight_data = data[data['record_id'] == 109] # use patient 109 for consistency\n\n# Plot 1: Flexion LSI ---------------------------------------------------------------------------------------------------------------\naxs[0].plot(highlight_data['visit_num'], highlight_data['lsi_flex_isok_60'], linestyle='-', marker='o', color='#00A9FF', label='You')\n\n# Plot and fill in IQR data\naxs[0].plot(flsi_percentiles['visit_num'], flsi_percentiles['q25'], color=\"#E5E5E5\", alpha=0.5)\naxs[0].plot(flsi_percentiles['visit_num'], flsi_percentiles['q75'], color=\"#E5E5E5\", alpha=0.5)\naxs[0].fill_between(flsi_percentiles['visit_num'], \n                 flsi_percentiles['q25'], \n                 flsi_percentiles['q75'], color=\"#E5E5E5\", alpha=0.5, label = 'patients')\n\n# Add colored dots\naxs[0].plot(highlight_data['visit_num'].iloc[0], highlight_data['lsi_flex_isok_60'].iloc[0], marker='o', color='#E5383B', markersize=6)\naxs[0].plot(highlight_data['visit_num'].iloc[3], highlight_data['lsi_flex_isok_60'].iloc[3], marker='o', color='#2DC653', markersize=6)\n\n# Add title and customize graph\naxs[0].set_title('Flexion LSI Recovery Over Visits', weight='bold', size=17, x=0.4, y=1.1, fontfamily='Sinhala Sangam MN')\naxs[0].set_xlim(.8, 4.07)\naxs[0].set_xticks([1, 2, 3, 4])\naxs[0].set_ylim(76, 100)\naxs[0].set_yticks([80, 90, 100])\naxs[0].tick_params(axis='y', which='both',length=0)\naxs[0].tick_params(axis='x', which='both',length=0)\naxs[0].spines['top'].set_visible(False)\naxs[0].spines['right'].set_visible(False)\naxs[0].spines['left'].set_visible(False)\naxs[0].spines['bottom'].set_visible(False)\naxs[0].grid(axis='y', linestyle = '--')\nplt.figtext(0.91, 0.843, 'Your Progress', size = 12, color='#00A9FF', fontfamily='Sinhala Sangam MN')\nplt.figtext(0.91, 0.82, \"Other Patients' IQR\", size = 12, color='gray', fontfamily='Sinhala Sangam MN')\nplt.figtext(0.91, 0.806, \"(Middle 50%)\", size = 12, color='gray', fontfamily='Sinhala Sangam MN')\n\n# Plot 2: Extension LSI ---------------------------------------------------------------------------------------------------------------\naxs[1].plot(highlight_data['visit_num'], highlight_data['lsi_ext_isok_60'], linestyle='-', marker='o', color='#3A6EA5', label='You')\n\n# Plot and fill in IQR data\naxs[1].plot(flsi_percentiles['visit_num'], flsi_percentiles['q25'], color=\"#E5E5E5\", alpha=0.5)\naxs[1].plot(flsi_percentiles['visit_num'], flsi_percentiles['q75'], color=\"#E5E5E5\", alpha=0.5)\naxs[1].fill_between(flsi_percentiles['visit_num'], \n                 flsi_percentiles['q25'], \n                 flsi_percentiles['q75'], color=\"#E5E5E5\", alpha=0.5, label = 'patients')\n\n# Add colored dots\naxs[1].plot(highlight_data['visit_num'].iloc[0], highlight_data['lsi_ext_isok_60'].iloc[0], marker='o', color='#E5383B', markersize=6)\naxs[1].plot(highlight_data['visit_num'].iloc[3], highlight_data['lsi_ext_isok_60'].iloc[3], marker='o', color='#2DC653', markersize=6)\n\n# Add title and customize graph\naxs[1].set_title('Extension LSI Recovery Over Visits', weight='bold', size=17, x=0.4, y=1.1, fontfamily='Sinhala Sangam MN')\naxs[1].set_xlim(.8, 4.07)\naxs[1].set_xticks([1, 2, 3, 4])\naxs[1].set_ylim(60, 100)\naxs[1].set_yticks([60, 70, 80, 90, 100])\naxs[1].tick_params(axis='y', which='both',length=0)\naxs[1].tick_params(axis='x', which='both',length=0)\naxs[1].spines['top'].set_visible(False)\naxs[1].spines['right'].set_visible(False)\naxs[1].spines['left'].set_visible(False)\naxs[1].spines['bottom'].set_visible(False)\naxs[1].grid(axis='y', linestyle = '--')\nplt.figtext(0.91, 0.486, 'Your Progress', size = 12, color='#3A6EA5', fontfamily='Sinhala Sangam MN')\nplt.figtext(0.91, 0.576, \"Other Patients' IQR\", size = 12, color='gray', fontfamily='Sinhala Sangam MN')\nplt.figtext(0.91, 0.56, \"(Middle 50%)\", size = 12, color='gray', fontfamily='Sinhala Sangam MN')\n\n# Plot 3: Single Hop LSI ---------------------------------------------------------------------------------------------------------------\ninterpolated_sh_lsi = highlight_data['sh_lsi'].interpolate() # Interpolate values because patient did not test for single hop lsi on 4th visit\naxs[2].plot(highlight_data['visit_num'], highlight_data['sh_lsi'], linestyle='-', marker='o', color='#38A3A5', label='You')\naxs[2].plot(highlight_data['visit_num'], interpolated_sh_lsi, linestyle='--', color='#38A3A5', label='Interpolated Data')\n\n# Plot and fill in IQR data\naxs[2].plot(sh_lsi_percentiles['visit_num'], sh_lsi_percentiles['q25'], color=\"#E5E5E5\", alpha=0.5)\naxs[2].plot(sh_lsi_percentiles['visit_num'], sh_lsi_percentiles['q75'], color=\"#E5E5E5\", alpha=0.5)\naxs[2].fill_between(sh_lsi_percentiles['visit_num'], \n                 sh_lsi_percentiles['q25'], \n                 sh_lsi_percentiles['q75'], color=\"#E5E5E5\", alpha=0.5, label = 'patients')\n\n# Add colored dots\naxs[2].plot(highlight_data['visit_num'].iloc[0], highlight_data['sh_lsi'].iloc[0], marker='o', color='#E5383B', markersize=6)\naxs[2].plot(highlight_data['visit_num'].iloc[3], interpolated_sh_lsi.iloc[3], marker='o', color='#2DC653', markersize=6)\n\n# Add title and customize graph\naxs[2].set_title('Single Hop LSI Recovery Over Visits', weight='bold', size=17, x=0.4, y=1.1, fontfamily='Sinhala Sangam MN')\naxs[2].set_xlim(.8, 4.07)\naxs[2].set_xticks([1, 2, 3, 4])\naxs[2].set_ylim(70, 100)\naxs[2].set_yticks([70, 80, 90, 100])\naxs[2].tick_params(axis='y', which='both',length=0)\naxs[2].tick_params(axis='x', which='both',length=0)\naxs[2].spines['top'].set_visible(False)\naxs[2].spines['right'].set_visible(False)\naxs[2].spines['left'].set_visible(False)\naxs[2].spines['bottom'].set_visible(False)\naxs[2].grid(axis='y', linestyle = '--')\nplt.figtext(0.91, 0.181, 'Your Progress', size = 12, color='#38A3A5', fontfamily='Sinhala Sangam MN')\nplt.figtext(0.91, 0.301, \"Other Patients' IQR\", size = 12, color='gray', fontfamily='Sinhala Sangam MN')\nplt.figtext(0.91, 0.285, \"(Middle 50%)\", size = 12, color='gray', fontfamily='Sinhala Sangam MN')\n\n# Overall graph customizations ---------------------------------------------------------------------------------------------------------------\nplt.figtext(0.182, 0.657, \"st Visit ...\", size = 11, color='black', fontfamily='Sinhala Sangam MN')\nplt.figtext(0.165, 0.08, \"Note: Data from Patient ID 109\", size=11, color='gray', fontfamily='Sinhala Sangam MN')\nplt.suptitle('Tracking Your ...', weight='bold', fontfamily='Sinhala Sangam MN', size=30, x=0.39, y=.955)\nplt.subplots_adjust(hspace=0.3)\nplt.subplots_adjust(hspace=0.3)\n\n# Save final image\nplt.savefig('./graph_images/line_series.png', bbox_inches='tight')",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Visualizations</span>"
    ]
  },
  {
    "objectID": "Graphs/Visualizations_book.html#graph-2-probability-distribution-of-acl-rsi-scores",
    "href": "Graphs/Visualizations_book.html#graph-2-probability-distribution-of-acl-rsi-scores",
    "title": "Visualizations",
    "section": "Graph 2: Probability Distribution of ACL-RSI scores",
    "text": "Graph 2: Probability Distribution of ACL-RSI scores\nThough the lineplot is useful for showcasing an individual patient’s progress over time, it is not effective for portraying the distribution of the ACL-RSI scores; therefore, we want to use a kernel density estimate plot stratified by visit number. We deliberately excluded 5th, 7th, 7th, 8th, and 9th visits to keep consistency with the line plots.\nCompared to line plots, the KDEplot is less familiar most people, and it will most certainly be unfamiliar to our target audience. Therefore, our graph includes an explanation of what it is supposed to portray. We hope that our visualization will demonstrate that people are more likely to have higher ACL-RSI scores as time passes and reassure patients who fear they will never feel ready to return to sport.\n\n# plotting kernel density estimate plots\nsns.kdeplot(data=data.where(data[\"visit_num\"]==1).dropna(), x=\"acl_rsi\", color=\"#DDDDDD\")\nsns.kdeplot(data=data.where(data[\"visit_num\"]==2).dropna(), x=\"acl_rsi\", color=\"#BBBBBB\")\nsns.kdeplot(data=data.where(data[\"visit_num\"]==3).dropna(), x=\"acl_rsi\", color=\"#666666\")\nsns.kdeplot(data=data.where(data[\"visit_num\"]==4).dropna(), x=\"acl_rsi\", color=\"#006500\")\n\n# customising text\nplt.title('\"Kernel Density Estimate\" Plot\\n of ACL-RSI Scores', weight='bold', size=17, x=0.522, y=1.05)\nplt.xlabel(\"ACL-RSI score\")\nplt.ylabel('\"Density\" score')\n\n# clarifying notes for the audience on what \"kde\" is for our \"audience\"\nplt.figtext(0.100, -0.0555, 'What is \"Kernel Density Estimate?\"', size = 11, color='black', weight=\"bold\")\nplt.figtext(0.100, -0.105, 'Using our data, the computer calculates the probability that we', size = 11, color='black')\nplt.figtext(0.100, -0.145, 'will see a certain ACL-RSI score. Then, we graph the probabilities.', size = 11, color='black')\nplt.figtext(0.100, -0.185, 'The higher the curve at a given point, the more likely we are to', size = 11, color='black')\nplt.figtext(0.100, -0.225, 'observe the value corresponding to that point.', size = 11, color='black')\nplt.figtext(0.100, -0.275, 'Understanding \"Density\"', size = 11, color='black', weight=\"bold\")\nplt.figtext(0.100, -0.3245, '\"Density\" = percent chance divided by 100', size = 11, color='black')\n\n# violently despining the graph lol \nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.gca().spines['bottom'].set_visible(False)\n\n# legend\nplt.legend([\"first visits\", \"second visits\", \"third visits\", \"fourth visits\"])\n\n# Save final image\nplt.savefig('./graph_images/kde_aclrsi.png', bbox_inches='tight')",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Visualizations</span>"
    ]
  },
  {
    "objectID": "Graphs/Visualizations_book.html#distribution-of-lsi-extension-strength-by-age-group",
    "href": "Graphs/Visualizations_book.html#distribution-of-lsi-extension-strength-by-age-group",
    "title": "Visualizations",
    "section": "Distribution of LSI Extension Strength by Age Group",
    "text": "Distribution of LSI Extension Strength by Age Group\nThe box plot offers a more familiar and straightforward way to visualize data for our target audience of young athletes. Each box represents the interquartile range (IQR) of LSI Extension Strength (60°/s) within an age group, while the whiskers show variability and the dots highlight outliers. This format allows patients and their families to quickly understand how their strength compares to others in their age group. The visualization reassures patients that some variation is normal and that most people fall within a certain performance band, particularly as they progress in recovery. By stratifying the data by age group, we emphasize that strength recovery can vary with age, which is helpful for setting age-appropriate expectations during rehab.\n\nbins = [0, 12, 15, 18, 21, 25, 100]\nlabels = ['10-12', '13-15', '16-18', '19-21', '22-25', '26+']\ndata['age_group'] = pd.cut(data['age'], bins=bins, labels=labels)\n\nbox_data = data[['age_group', 'lsi_ext_isok_60']].dropna()\nbox_data = box_data[box_data['age_group'].isin(labels)]\n\nage_order = labels  # you already have them in the right order\n\nsns.set(style=\"whitegrid\")\n\nplt.figure(figsize=(10, 6))\nflierprops = dict(marker='o', markerfacecolor='red', markeredgecolor='red', markersize=4, linestyle='none')\n\nax = sns.boxplot(\n    x='age_group',\n    y='lsi_ext_isok_60',\n    data=box_data,\n    palette=\"Blues\",\n    flierprops=flierprops,\n    order=age_order  \n)\n\nax.set_title('LSI Extension Strength by Age Group', weight='bold', size=17, x=0.5, y=1.05)\nax.set_xlabel('Age Group', fontsize=12)\nax.set_ylabel('LSI Extension Strength (60°/s)', fontsize=12)\n\nplt.ylim(0, 150)\nplt.yticks([0, 50, 100, 150])\nplt.tick_params(axis='y', which='both', length=0)\nplt.tick_params(axis='x', which='both', length=0)\n\nfor spine in ['top', 'right', 'left', 'bottom']:\n    plt.gca().spines[spine].set_visible(False)\n\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.tight_layout()\n\n# Plot the patient as a star\n# Get the patient's row\npatient_row = data[(data['record_id'] == 109) & (data['visit_num'] == 1)].iloc[0]\npatient_age_group = patient_row['age_group']\npatient_value = patient_row['lsi_ext_isok_60']\n# Get the value's position \nx_plot_pos = labels.index(patient_age_group)\n# Plot the star\nax.plot(x_plot_pos, patient_value, marker='*', color='white', markersize=14, label='Patient 109')\nplt.figtext(0.9, .41, 'You', weight = 'bold', size = 11, color='white')\n\nplt.show()\n\n# Save final image\nplt.savefig('./graph_images/boxplots.png', bbox_inches='tight')\n\n/var/folders/y3/qpldbqrx2dn72lflj336s6l00000gn/T/ipykernel_84821/1802104442.py:15: FutureWarning:\n\n\n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Visualizations</span>"
    ]
  },
  {
    "objectID": "Graphs/Visualizations_book.html#graph-3-distribution-of-lsi-extension-strength-by-age-group",
    "href": "Graphs/Visualizations_book.html#graph-3-distribution-of-lsi-extension-strength-by-age-group",
    "title": "Visualizations",
    "section": "Graph 3: Distribution of LSI Extension Strength by Age Group",
    "text": "Graph 3: Distribution of LSI Extension Strength by Age Group\nThe box plot offers a more familiar and straightforward way to visualize data for our target audience of young athletes. Each box represents the interquartile range (IQR) of LSI Extension Strength (60°/s) within an age group, while the whiskers show variability and the dots highlight outliers. This format allows patients and their families to quickly understand how their strength compares to others in their age group. The visualization reassures patients that some variation is normal and that most people fall within a certain performance band, particularly as they progress in recovery. By stratifying the data by age group, we emphasize that strength recovery can vary with age, which is helpful for setting age-appropriate expectations during rehab.\n\nbins = [0, 12, 15, 18, 21, 25, 100]\nlabels = ['10-12', '13-15', '16-18', '19-21', '22-25', '26+']\ndata['age_group'] = pd.cut(data['age'], bins=bins, labels=labels)\n\nbox_data = data[['age_group', 'lsi_ext_isok_60']].dropna()\nbox_data = box_data[box_data['age_group'].isin(labels)]\n\nage_order = labels  # you already have them in the right order\n\nsns.set(style=\"whitegrid\")\n\nplt.figure(figsize=(10, 6))\nflierprops = dict(marker='o', markerfacecolor='red', markeredgecolor='red', markersize=4, linestyle='none')\n\nax = sns.boxplot(\n    x='age_group',\n    y='lsi_ext_isok_60',\n    data=box_data,\n    palette=\"Blues\",\n    flierprops=flierprops,\n    order=age_order  \n)\n\nax.set_title('LSI Extension Strength by Age Group', weight='bold', size=17, x=0.5, y=1.05)\nax.set_xlabel('Age Group', fontsize=12)\nax.set_ylabel('LSI Extension Strength (60°/s)', fontsize=12)\n\nplt.ylim(0, 150)\nplt.yticks([0, 50, 100, 150])\nplt.tick_params(axis='y', which='both', length=0)\nplt.tick_params(axis='x', which='both', length=0)\n\nfor spine in ['top', 'right', 'left', 'bottom']:\n    plt.gca().spines[spine].set_visible(False)\n\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.tight_layout()\n\n# Plot the patient as a star\n# Get the patient's row\npatient_row = data[(data['record_id'] == 109) & (data['visit_num'] == 1)].iloc[0]\npatient_age_group = patient_row['age_group']\npatient_value = patient_row['lsi_ext_isok_60']\n# Get the value's position \nx_plot_pos = labels.index(patient_age_group)\n# Plot the star\nax.plot(x_plot_pos, patient_value, marker='*', color='white', markersize=14, label='Patient 109')\nplt.figtext(0.9, .41, 'You', weight = 'bold', size = 11, color='white')\n\nplt.show()\n\n# Save final image\nplt.savefig('./graph_images/boxplots.png', bbox_inches='tight')\n\n/var/folders/y3/qpldbqrx2dn72lflj336s6l00000gn/T/ipykernel_85392/1802104442.py:15: FutureWarning:\n\n\n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Visualizations</span>"
    ]
  },
  {
    "objectID": "index.html#prepared-for",
    "href": "index.html#prepared-for",
    "title": "DS2023 Final Project (Rename)",
    "section": "Prepared For",
    "text": "Prepared For\n[Insert organization, stakeholder, audience here]",
    "crumbs": [
      "Report"
    ]
  },
  {
    "objectID": "index.html#problem-statement",
    "href": "index.html#problem-statement",
    "title": "DS2023 Final Project (Rename)",
    "section": "Problem Statement",
    "text": "Problem Statement\n[Clearly define the problem you are addressing. Include background context and the significance of the issue. This is beginning of your story - plot setting. Can include a graph]",
    "crumbs": [
      "Report"
    ]
  },
  {
    "objectID": "index.html#analysis",
    "href": "index.html#analysis",
    "title": "DS2023 Final Project (Rename)",
    "section": "Analysis",
    "text": "Analysis\n[use storytelling and visuals to show how you are answering the problem]",
    "crumbs": [
      "Report"
    ]
  },
  {
    "objectID": "index.html#conclusion",
    "href": "index.html#conclusion",
    "title": "DS2023 Final Project (Rename)",
    "section": "Conclusion",
    "text": "Conclusion\n[use storytelling to give your conclusions and/or action items, can include a visual]",
    "crumbs": [
      "Report"
    ]
  },
  {
    "objectID": "datadictionary.html",
    "href": "datadictionary.html",
    "title": "4  Data Dictionary",
    "section": "",
    "text": "Variable Name\nVariable Label\nDescription\n\n\n\n\nacl_rsi\nAnterior cruciate ligament return-to-sport after injury survey\nPatients are given a survey (the “ACL-RSI” survey) where they answer questions related to “appraisal,” “confidence,” and “emotions”. Then, their psychological readiness score is calculated out of one hundred points. Though our report largely focuses on athletes’ performance after ACLR, psychological readiness remains relevant because suffering an athletic injury and undergoing surgery will affect a person beyond the physical dimension of their sport.\n\n\nlsi_ext_isok_60\nLSI Extension Isokinetic 60°\nLimb symmetry index (“lsi”) for isokinetic (“isok”) extension strength (ext) at a sixty-degree angle (“60”). Limb symmetry index is a percentage value calculated by measuring the torque of the involved (i.e. affected) limb, measuring the torque of the contralateral limb, dividing the involved limb value by the contralateral limb value, and multiplying by one hundred. The patient bends their leg backwards sixty degrees for isokinetic strength measurements.\n\n\nlsi_flex_isok_60\nLSI Flexion Isokinetic 60°\nLimb symmetry index (“lsi”) for isokinetic (“isok”) flexion strength (“flex”) at a sixty-degree angle (“60”). The patient bends their leg forward sixty degrees (i.e. back its original position) for isokinetic strength measurements, but limb symmetry index is calculated the same way.\n\n\nsh_lsi\n“Single hop” limb symmetry index\nA patient hopped once on their afflicted limb, then they hopped once on the contralateral limb. The hop distances were taken in metres, and the involved limb value was divided by the contralateral limb value and multiplied by one hundred. It measures patients’ abilities while they are engaged in movements similar to when they play sports.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Dictionary</span>"
    ]
  },
  {
    "objectID": "datadictionary.html#data-dictionary",
    "href": "datadictionary.html#data-dictionary",
    "title": "4  Data Dictionary",
    "section": "",
    "text": "Variable Name\nVariable Label\nDescription\n\n\n\n\nacl_rsi\nAnterior cruciate ligament return-to-sport after injury survey\nPatients are given a survey (the “ACL-RSI” survey) where they answer questions related to “appraisal,” “confidence,” and “emotions”. Then, their psychological readiness score is calculated out of one hundred points. Though our report largely focuses on athletes’ performance after ACLR, psychological readiness remains relevant because suffering an athletic injury and undergoing surgery will affect a person beyond the physical dimension of their sport.\n\n\nlsi_ext_isok_60\nLSI Extension Isokinetic 60°\nLimb symmetry index for isokinetic extension strength at a 60-degree angle. Limb symmetry index is a percentage value calculated by measuring the torque of the involved (i.e. affected) limb, measuring the torque of the contralateral limb, dividing the involved limb value by the contralateral limb value, and multiplying by one hundred. The patient bends their leg backwards sixty degrees for isokinetic strength measurements.\n\n\nlsi_flex_isok_60\nLSI Flexion Isokinetic 60°\nLimb symmetry index (“lsi”) for isokinetic (“isok”) flexion strength (“flex”) at a sixty-degree angle (“60”). The patient bends their leg forward sixty degrees (i.e. back its original position) for isokinetic strength measurements, but limb symmetry index is calculated the same way. We include lsi_flex_isok_60 in our report for the same purpose as lsi_ext_isok_60.\n\n\nsh_lsi\n“Single hop” limb symmetry index\n“Single hop” limb symmetry index. A patient hopped once on their afflicted limb, then they hopped once on the contralateral limb. The hop distances were taken in metres, and the involved limb value was divided by the contralateral limb value and multiplied by one hundred. It measures patients’ abilities while they are engaged in movements similar to when they play sports.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Dictionary</span>"
    ]
  },
  {
    "objectID": "EDA/EDA_book.html",
    "href": "EDA/EDA_book.html",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "Understanding and Cleaning Dataset\n# import libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n# Load in data\ndata = pd.read_csv('../data/final_data_cleaned.csv')\ndata.head()\n\n\n\n\n\n\n\n\nrecord_id\nredcap_event_name\nsex_dashboard\nage\nage_group\nacl_rsi\nlsi_ext_isok_60\nlsi_flex_isok_60\nsh_lsi\nvisit_num\n\n\n\n\n0\n1\nvisit_1_arm_1\nMale\n21.7\n5.0\n87.5\n87.86\n103.32\n97.68\n1\n\n\n1\n2\nvisit_1_arm_1\nFemale\n14.5\n2.0\n8.3\n45.00\n72.98\n75.38\n1\n\n\n2\n3\nvisit_1_arm_1\nFemale\n14.0\n2.0\n94.2\n81.53\n81.11\n95.20\n1\n\n\n3\n4\nvisit_1_arm_1\nFemale\n17.6\n3.0\nNaN\n61.56\n64.21\n94.49\n1\n\n\n4\n4\nvisit_2_arm_1\nFemale\n18.2\n4.0\n76.7\n76.20\n81.86\n96.54\n2\n# Let's see the shape.\ndata.shape\n\n(2222, 10)\nThere are 2222 observations and 10 features.\n# Let's understand the observations? Are there 2222 separate patients?\nprint(data['record_id'].nunique())\nresults1 = data['record_id'].value_counts().describe()\n\ntable = pd.DataFrame(results1) # this will show the results as a table format\ndisplay(table) \n\n1362\n\n\n\n\n\n\n\n\n\ncount\n\n\n\n\ncount\n1362.000000\n\n\nmean\n1.631424\n\n\nstd\n1.306451\n\n\nmin\n1.000000\n\n\n25%\n1.000000\n\n\n50%\n1.000000\n\n\n75%\n2.000000\n\n\nmax\n15.000000\nWe can see that there are 1362 unique patients, so this means that each patient may have multiple entries. Subjects have an average of 1.6 (rounded to 2) visits.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "EDA/EDA_book.html#data-types",
    "href": "EDA/EDA_book.html#data-types",
    "title": "Exploratory Data Analysis",
    "section": "Data Types",
    "text": "Data Types\n\n# Seeing what variables we are working with \n# This will show categorical variables\ndata.select_dtypes(include=['object', 'category', 'string']).head(n=3)\n\n\n\n\n\n\n\n\nredcap_event_name\nsex_dashboard\n\n\n\n\n0\nvisit_1_arm_1\nMale\n\n\n1\nvisit_1_arm_1\nFemale\n\n\n2\nvisit_1_arm_1\nFemale\n\n\n\n\n\n\n\n\n# This will which variables are numerical/continuous\ndata.select_dtypes(include=['int64', 'float64']).head(n=3)\n\n\n\n\n\n\n\n\nrecord_id\nage\nage_group\nacl_rsi\nlsi_ext_isok_60\nlsi_flex_isok_60\nsh_lsi\nvisit_num\n\n\n\n\n0\n1\n21.7\n5.0\n87.5\n87.86\n103.32\n97.68\n1\n\n\n1\n2\n14.5\n2.0\n8.3\n45.00\n72.98\n75.38\n1\n\n\n2\n3\n14.0\n2.0\n94.2\n81.53\n81.11\n95.20\n1",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "EDA/EDA_book.html#descriptive-statistics-distributions",
    "href": "EDA/EDA_book.html#descriptive-statistics-distributions",
    "title": "Exploratory Data Analysis",
    "section": "Descriptive Statistics & Distributions",
    "text": "Descriptive Statistics & Distributions\n\nExtension LSI and Flexion LSI\n\n# Let's see the summary stats for knee extension lsi and knee flexion lsi, \n# this would show how symmetric the uninjured and injured limbs are when \n# extending and flexing the leg\n\ntable = pd.DataFrame(data['lsi_ext_isok_60'].describe())\ndisplay(table)\n\ntable = pd.DataFrame(data['lsi_flex_isok_60'].describe())\ndisplay(table)\n\ndata['lsi_flex_isok_60'].isnull().sum()\n\n# It seems that patients generally seem to do better in flexion than extension, as the \n# mean is higher and the 75th percentile is also higher.\n\n\n\n\n\n\n\n\nlsi_ext_isok_60\n\n\n\n\ncount\n2222.000000\n\n\nmean\n73.218780\n\n\nstd\n22.299614\n\n\nmin\n10.967185\n\n\n25%\n58.517500\n\n\n50%\n73.819601\n\n\n75%\n86.407500\n\n\nmax\n247.370000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlsi_flex_isok_60\n\n\n\n\ncount\n2222.000000\n\n\nmean\n89.728019\n\n\nstd\n18.970152\n\n\nmin\n22.550000\n\n\n25%\n79.000000\n\n\n50%\n90.000000\n\n\n75%\n100.301858\n\n\nmax\n311.110000\n\n\n\n\n\n\n\n0\n\n\n\n# This kde plot for both lsi extension and lsi flexion shows what \n# their basic distributions look like\n\nd1 = data[['lsi_ext_isok_60', 'lsi_flex_isok_60']]\nsns.kdeplot(d1, multiple='stack')\nplt.title('KDE of Isokinetic Knee Extension and Flexion LSI')\nplt.xlim(0, 250)\nplt.tick_params(axis='y', which='both',length=0)\nplt.tick_params(axis='x', which='both',length=0)\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\n\n# There are less flexion measurements overall compared to extension, \n# and the flexion lsi values are slightly higher than extension lsi, \n# though they both have unimodal peaks",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "EDA/EDA_book.html#examine-correlations",
    "href": "EDA/EDA_book.html#examine-correlations",
    "title": "Exploratory Data Analysis",
    "section": "Examine Correlations",
    "text": "Examine Correlations\n\nsns.scatterplot(data=data, x='lsi_ext_isok_60', y='lsi_flex_isok_60')\nplt.title('Relationship in Flexion and Extension LSI')\nplt.xlabel('Extension LSI')\nplt.ylabel('Flexion LSI')\nplt.tick_params(axis='y', which='both',length=0)\nplt.tick_params(axis='x', which='both',length=0)\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.gca().spines['bottom'].set_visible(False)\nplt.ylim(0,200)\nplt.xlim(0,200)\n\n# By plotting the LSIs for flexion and extension, it may look like a blob at first, but \n# there seems to be a little bit of a positive correlation.\n# This shows that perhaps Flexion and Extension LSIs tend to be similar for many patients.\n\n\n\n\n\n\n\n\n\nFlexion LSI Over Time\n\ndata['visit_num'].value_counts()\n\nvisit_num\n1    904\n2    845\n3    232\n4     90\n5     50\n6     35\n9     33\n7     20\n8     13\nName: count, dtype: int64\n\n\n\ndata['lsi_flex_isok_60'].groupby(data['visit_num']).mean()\n\nvisit_num\n1    86.260421\n2    91.778607\n3    92.247613\n4    93.090331\n5    91.345113\n6    90.966387\n7    94.337597\n8    93.832306\n9    97.154199\nName: lsi_flex_isok_60, dtype: float64\n\n\nFrom these tables, we can see that though the number of patients decreases over vists. On average, patients’ LSI for flexion strength increases over time. Let’s see this more clearly through a line graph.\n\nmean_lsi_f = data.groupby('redcap_event_name')['lsi_flex_isok_60'].mean().reset_index()\n\nvisit_order = ['visit_1_arm_1', 'visit_2_arm_1', 'visit_3_arm_1', 'visit_4_arm_1', 'visit_5_arm_1', 'visit_6_arm_1', 'visit_7_arm_1', 'visit_8_arm_1', 'visit_9_arm_1']\nmean_lsi_f['redcap_event_name'] = pd.Categorical(\n    mean_lsi_f['redcap_event_name'], \n    categories=visit_order, \n    ordered=True\n)\nmean_lsi_f = mean_lsi_f.sort_values('redcap_event_name')\n\nvisit_map = {\n    'visit_1_arm_1': 1,\n    'visit_2_arm_1': 2,\n    'visit_3_arm_1': 3,\n    'visit_4_arm_1': 4,\n    'visit_5_arm_1': 5,\n    'visit_6_arm_1': 6,\n    'visit_7_arm_1': 7,\n    'visit_8_arm_1': 8,\n    'visit_9_arm_1': 9,\n}\n\nmean_lsi_f['visit_num'] = mean_lsi_f['redcap_event_name'].map(visit_map)\nmean_lsi_f['visit_num'] = pd.to_numeric(mean_lsi_f['visit_num'], errors='coerce').astype('Int64')\n\n\n# Plot\nplt.figure(figsize=(6, 4))\nplt.plot(mean_lsi_f['visit_num'].astype(str), mean_lsi_f['lsi_flex_isok_60'], marker='o')\nplt.title('Mean Flexion LSI Across Visits (All Patients)')\nplt.xlabel('Visit')\nplt.ylabel('Mean Isokinetic Knee Flexion (sh_lsi)')\nplt.grid(axis='y')\n\n#plt.ylim(0, 2.5)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "EDA/EDA_book.html#explore-relationships",
    "href": "EDA/EDA_book.html#explore-relationships",
    "title": "Exploratory Data Analysis",
    "section": "Explore Relationships",
    "text": "Explore Relationships\n\nExtension LSI and Sex\n\nsns.boxplot(x='sex_dashboard', y='lsi_ext_isok_60', data=data, hue='sex_dashboard')\nplt.title('Are there differences in Extension LSI between sex?')\nplt.xlabel('Isokinetic knee extension symmetry')\nplt.ylabel('Sex')\nplt.tick_params(axis='y', which='both',length=0)\nplt.tick_params(axis='x', which='both',length=0)\nplt.ylim(0, 140)\nplt.show()\n\nsns.boxplot(x='sex_dashboard', y='lsi_flex_isok_60', data=data, hue='sex_dashboard')\nplt.title('Are there differences in Flexion LSI between sex?')\nplt.xlabel('Isokinetic knee flexion symmetry')\nplt.ylabel('Sex')\nplt.tick_params(axis='y', which='both',length=0)\nplt.tick_params(axis='x', which='both',length=0)\nplt.ylim(0, 140)\nplt.show()\n\n# We thought comparing some assessments/tests by sex might be meaningful due to \n# possible recovery differences\n# After making boxplots grouped by sex for lsi, the sexes seem to perform more \n# similarly for flexion lsi than extension lsi. \n# For extension lsi, the percentiles and mean values for female are slightly lower than \n# male, though we're not sure how significant this is.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSingle Hop LSI between Age Groups\n\nsns.violinplot(data=data, y='sh_lsi', x='age_group')\nplt.title('Differences in Flexion for Age Groups')\nplt.xlabel('Age Group')\nplt.ylabel('Isokinetic knee flexion')\nplt.tick_params(axis='y', which='both',length=0)\nplt.tick_params(axis='x', which='both',length=0)\nplt.ylim(50, 130)\n\n# It is important to note that the study has age groups, from younger to older\n# As the ages increase, the single hop LSI decreases and then increases again\n\n\n\n\n\n\n\n\n\ndata.head()\ndata['sh_lsi'].groupby(data['age_group']).mean()\n\nage_group\n1.0    93.300229\n2.0    93.969452\n3.0    92.527524\n4.0    91.753894\n5.0    90.619473\n6.0    83.350951\n7.0    83.052291\n8.0    91.734000\nName: sh_lsi, dtype: float64\n\n\nWe can see that the mean of single hop lsi per group somewhat decreases, where age groups 6 and 7 have the lowest symmetry.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  }
]